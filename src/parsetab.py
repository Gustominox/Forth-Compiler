
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMENT DIVIDE DROP DUP FLOAT INT MINUS MOD OVER PLUS PONTO SEMICOLON SWAP TIMES WORDaxioma : axioma lineaxioma : emptyline : COMMENTline : PONTOline : line operationline : int line\n            | float lineline : intline : floatint : INTfloat : FLOATline : COLON WORD COMMENT code SEMICOLONcode : axiomaline : WORDoperation : PLUSoperation : MINUSoperation : TIMESoperation : DIVIDEoperation : MODempty :'
    
_lr_action_items = {'COMMENT':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,],[-20,4,-2,-1,-3,-4,4,4,-14,-10,-11,-5,-15,-16,-17,-18,-19,-6,-7,21,-20,4,-12,]),'PONTO':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,23,24,],[-20,5,-2,-1,-3,-4,5,5,-14,-10,-11,-5,-15,-16,-17,-18,-19,-6,-7,-20,5,-12,]),'COLON':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,23,24,],[-20,8,-2,-1,-3,-4,8,8,-14,-10,-11,-5,-15,-16,-17,-18,-19,-6,-7,-20,8,-12,]),'WORD':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,23,24,],[-20,9,-2,-1,-3,-4,9,9,20,-14,-10,-11,-5,-15,-16,-17,-18,-19,-6,-7,-20,9,-12,]),'INT':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,23,24,],[-20,10,-2,-1,-3,-4,10,10,-14,-10,-11,-5,-15,-16,-17,-18,-19,-6,-7,-20,10,-12,]),'FLOAT':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,23,24,],[-20,11,-2,-1,-3,-4,11,11,-14,-10,-11,-5,-15,-16,-17,-18,-19,-6,-7,-20,11,-12,]),'$end':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,24,],[-20,0,-2,-1,-3,-4,-8,-9,-14,-10,-11,-5,-15,-16,-17,-18,-19,-6,-7,-12,]),'SEMICOLON':([2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,],[-2,-1,-3,-4,-8,-9,-14,-10,-11,-5,-15,-16,-17,-18,-19,-6,-7,-20,24,-13,-12,]),'PLUS':([3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,24,],[13,-3,-4,-8,-9,-14,-10,-11,-5,-15,-16,-17,-18,-19,13,13,-12,]),'MINUS':([3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,24,],[14,-3,-4,-8,-9,-14,-10,-11,-5,-15,-16,-17,-18,-19,14,14,-12,]),'TIMES':([3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,24,],[15,-3,-4,-8,-9,-14,-10,-11,-5,-15,-16,-17,-18,-19,15,15,-12,]),'DIVIDE':([3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,24,],[16,-3,-4,-8,-9,-14,-10,-11,-5,-15,-16,-17,-18,-19,16,16,-12,]),'MOD':([3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,24,],[17,-3,-4,-8,-9,-14,-10,-11,-5,-15,-16,-17,-18,-19,17,17,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'axioma':([0,21,],[1,23,]),'empty':([0,21,],[2,2,]),'line':([1,6,7,23,],[3,18,19,3,]),'int':([1,6,7,23,],[6,6,6,6,]),'float':([1,6,7,23,],[7,7,7,7,]),'operation':([3,18,19,],[12,12,12,]),'code':([21,],[22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> axioma","S'",1,None,None,None),
  ('axioma -> axioma line','axioma',2,'p_axioma_iter','forth_yacc_wordDef.py',17),
  ('axioma -> empty','axioma',1,'p_axioma_empty','forth_yacc_wordDef.py',21),
  ('line -> COMMENT','line',1,'p_line_comment','forth_yacc_wordDef.py',25),
  ('line -> PONTO','line',1,'p_line_ponto','forth_yacc_wordDef.py',29),
  ('line -> line operation','line',2,'p_line_expression_arithmetic','forth_yacc_wordDef.py',37),
  ('line -> int line','line',2,'p_line_variable_list','forth_yacc_wordDef.py',41),
  ('line -> float line','line',2,'p_line_variable_list','forth_yacc_wordDef.py',42),
  ('line -> int','line',1,'p_line_int','forth_yacc_wordDef.py',46),
  ('line -> float','line',1,'p_line_float','forth_yacc_wordDef.py',50),
  ('int -> INT','int',1,'p_int','forth_yacc_wordDef.py',54),
  ('float -> FLOAT','float',1,'p_float','forth_yacc_wordDef.py',59),
  ('line -> COLON WORD COMMENT code SEMICOLON','line',5,'p_line_definition','forth_yacc_wordDef.py',65),
  ('code -> axioma','code',1,'p_code','forth_yacc_wordDef.py',69),
  ('line -> WORD','line',1,'p_line_word','forth_yacc_wordDef.py',73),
  ('operation -> PLUS','operation',1,'p_operation_plus','forth_yacc_wordDef.py',80),
  ('operation -> MINUS','operation',1,'p_operation_minus','forth_yacc_wordDef.py',92),
  ('operation -> TIMES','operation',1,'p_operation_times','forth_yacc_wordDef.py',104),
  ('operation -> DIVIDE','operation',1,'p_operation_divide','forth_yacc_wordDef.py',115),
  ('operation -> MOD','operation',1,'p_operationi_mod','forth_yacc_wordDef.py',126),
  ('empty -> <empty>','empty',0,'p_empty','forth_yacc_wordDef.py',136),
]
