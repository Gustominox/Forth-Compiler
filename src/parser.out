Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DROP
    DUP
    OVER
    SWAP

Grammar

Rule 0     S' -> axioma
Rule 1     axioma -> axioma ponto
Rule 2     axioma -> axioma COMMENT
Rule 3     axioma -> axioma expression
Rule 4     axioma -> axioma definition
Rule 5     axioma -> axioma variable_list
Rule 6     axioma -> empty
Rule 7     empty -> <empty>
Rule 8     ponto -> PONTO
Rule 9     expression -> int int operationi
Rule 10    expression -> float float operationf
Rule 11    expression -> float int operationf
Rule 12    expression -> int float operationf
Rule 13    int -> INT
Rule 14    float -> FLOAT
Rule 15    variable_list -> int variable_list
Rule 16    variable_list -> float variable_list
Rule 17    variable_list -> int
Rule 18    variable_list -> float
Rule 19    definition -> COLON WORD COMMENT code SEMICOLON
Rule 20    code -> expression
Rule 21    operationi -> PLUS
Rule 22    operationi -> MINUS
Rule 23    operationi -> TIMES
Rule 24    operationi -> DIVIDE
Rule 25    operationi -> MOD
Rule 26    operationf -> PLUS
Rule 27    operationf -> MINUS
Rule 28    operationf -> TIMES
Rule 29    operationf -> DIVIDE

Terminals, with rules where they appear

COLON                : 19
COMMENT              : 2 19
DIVIDE               : 24 29
DROP                 : 
DUP                  : 
FLOAT                : 14
INT                  : 13
MINUS                : 22 27
MOD                  : 25
OVER                 : 
PLUS                 : 21 26
PONTO                : 8
SEMICOLON            : 19
SWAP                 : 
TIMES                : 23 28
WORD                 : 19
error                : 

Nonterminals, with rules where they appear

axioma               : 1 2 3 4 5 0
code                 : 19
definition           : 4
empty                : 6
expression           : 3 20
float                : 10 10 11 12 16 18
int                  : 9 9 11 12 15 17
operationf           : 10 11 12
operationi           : 9
ponto                : 1
variable_list        : 5 15 16

Parsing method: LALR

state 0

    (0) S' -> . axioma
    (1) axioma -> . axioma ponto
    (2) axioma -> . axioma COMMENT
    (3) axioma -> . axioma expression
    (4) axioma -> . axioma definition
    (5) axioma -> . axioma variable_list
    (6) axioma -> . empty
    (7) empty -> .

    COMMENT         reduce using rule 7 (empty -> .)
    PONTO           reduce using rule 7 (empty -> .)
    COLON           reduce using rule 7 (empty -> .)
    INT             reduce using rule 7 (empty -> .)
    FLOAT           reduce using rule 7 (empty -> .)
    $end            reduce using rule 7 (empty -> .)

    axioma                         shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> axioma .
    (1) axioma -> axioma . ponto
    (2) axioma -> axioma . COMMENT
    (3) axioma -> axioma . expression
    (4) axioma -> axioma . definition
    (5) axioma -> axioma . variable_list
    (8) ponto -> . PONTO
    (9) expression -> . int int operationi
    (10) expression -> . float float operationf
    (11) expression -> . float int operationf
    (12) expression -> . int float operationf
    (19) definition -> . COLON WORD COMMENT code SEMICOLON
    (15) variable_list -> . int variable_list
    (16) variable_list -> . float variable_list
    (17) variable_list -> . int
    (18) variable_list -> . float
    (13) int -> . INT
    (14) float -> . FLOAT

    COMMENT         shift and go to state 4
    PONTO           shift and go to state 8
    COLON           shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    ponto                          shift and go to state 3
    expression                     shift and go to state 5
    definition                     shift and go to state 6
    variable_list                  shift and go to state 7
    int                            shift and go to state 9
    float                          shift and go to state 10

state 2

    (6) axioma -> empty .

    COMMENT         reduce using rule 6 (axioma -> empty .)
    PONTO           reduce using rule 6 (axioma -> empty .)
    COLON           reduce using rule 6 (axioma -> empty .)
    INT             reduce using rule 6 (axioma -> empty .)
    FLOAT           reduce using rule 6 (axioma -> empty .)
    $end            reduce using rule 6 (axioma -> empty .)


state 3

    (1) axioma -> axioma ponto .

    COMMENT         reduce using rule 1 (axioma -> axioma ponto .)
    PONTO           reduce using rule 1 (axioma -> axioma ponto .)
    COLON           reduce using rule 1 (axioma -> axioma ponto .)
    INT             reduce using rule 1 (axioma -> axioma ponto .)
    FLOAT           reduce using rule 1 (axioma -> axioma ponto .)
    $end            reduce using rule 1 (axioma -> axioma ponto .)


state 4

    (2) axioma -> axioma COMMENT .

    COMMENT         reduce using rule 2 (axioma -> axioma COMMENT .)
    PONTO           reduce using rule 2 (axioma -> axioma COMMENT .)
    COLON           reduce using rule 2 (axioma -> axioma COMMENT .)
    INT             reduce using rule 2 (axioma -> axioma COMMENT .)
    FLOAT           reduce using rule 2 (axioma -> axioma COMMENT .)
    $end            reduce using rule 2 (axioma -> axioma COMMENT .)


state 5

    (3) axioma -> axioma expression .

    COMMENT         reduce using rule 3 (axioma -> axioma expression .)
    PONTO           reduce using rule 3 (axioma -> axioma expression .)
    COLON           reduce using rule 3 (axioma -> axioma expression .)
    INT             reduce using rule 3 (axioma -> axioma expression .)
    FLOAT           reduce using rule 3 (axioma -> axioma expression .)
    $end            reduce using rule 3 (axioma -> axioma expression .)


state 6

    (4) axioma -> axioma definition .

    COMMENT         reduce using rule 4 (axioma -> axioma definition .)
    PONTO           reduce using rule 4 (axioma -> axioma definition .)
    COLON           reduce using rule 4 (axioma -> axioma definition .)
    INT             reduce using rule 4 (axioma -> axioma definition .)
    FLOAT           reduce using rule 4 (axioma -> axioma definition .)
    $end            reduce using rule 4 (axioma -> axioma definition .)


state 7

    (5) axioma -> axioma variable_list .

    COMMENT         reduce using rule 5 (axioma -> axioma variable_list .)
    PONTO           reduce using rule 5 (axioma -> axioma variable_list .)
    COLON           reduce using rule 5 (axioma -> axioma variable_list .)
    INT             reduce using rule 5 (axioma -> axioma variable_list .)
    FLOAT           reduce using rule 5 (axioma -> axioma variable_list .)
    $end            reduce using rule 5 (axioma -> axioma variable_list .)


state 8

    (8) ponto -> PONTO .

    COMMENT         reduce using rule 8 (ponto -> PONTO .)
    PONTO           reduce using rule 8 (ponto -> PONTO .)
    COLON           reduce using rule 8 (ponto -> PONTO .)
    INT             reduce using rule 8 (ponto -> PONTO .)
    FLOAT           reduce using rule 8 (ponto -> PONTO .)
    $end            reduce using rule 8 (ponto -> PONTO .)


state 9

    (9) expression -> int . int operationi
    (12) expression -> int . float operationf
    (15) variable_list -> int . variable_list
    (17) variable_list -> int .
    (13) int -> . INT
    (14) float -> . FLOAT
    (15) variable_list -> . int variable_list
    (16) variable_list -> . float variable_list
    (17) variable_list -> . int
    (18) variable_list -> . float

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    COMMENT         reduce using rule 17 (variable_list -> int .)
    PONTO           reduce using rule 17 (variable_list -> int .)
    COLON           reduce using rule 17 (variable_list -> int .)
    $end            reduce using rule 17 (variable_list -> int .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

  ! INT             [ reduce using rule 17 (variable_list -> int .) ]
  ! FLOAT           [ reduce using rule 17 (variable_list -> int .) ]

    int                            shift and go to state 14
    float                          shift and go to state 15
    variable_list                  shift and go to state 16

state 10

    (10) expression -> float . float operationf
    (11) expression -> float . int operationf
    (16) variable_list -> float . variable_list
    (18) variable_list -> float .
    (14) float -> . FLOAT
    (13) int -> . INT
    (15) variable_list -> . int variable_list
    (16) variable_list -> . float variable_list
    (17) variable_list -> . int
    (18) variable_list -> . float

  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
    COMMENT         reduce using rule 18 (variable_list -> float .)
    PONTO           reduce using rule 18 (variable_list -> float .)
    COLON           reduce using rule 18 (variable_list -> float .)
    $end            reduce using rule 18 (variable_list -> float .)
    FLOAT           shift and go to state 13
    INT             shift and go to state 12

  ! INT             [ reduce using rule 18 (variable_list -> float .) ]
  ! FLOAT           [ reduce using rule 18 (variable_list -> float .) ]

    float                          shift and go to state 17
    int                            shift and go to state 18
    variable_list                  shift and go to state 19

state 11

    (19) definition -> COLON . WORD COMMENT code SEMICOLON

    WORD            shift and go to state 20


state 12

    (13) int -> INT .

    INT             reduce using rule 13 (int -> INT .)
    FLOAT           reduce using rule 13 (int -> INT .)
    COMMENT         reduce using rule 13 (int -> INT .)
    PONTO           reduce using rule 13 (int -> INT .)
    COLON           reduce using rule 13 (int -> INT .)
    $end            reduce using rule 13 (int -> INT .)
    PLUS            reduce using rule 13 (int -> INT .)
    MINUS           reduce using rule 13 (int -> INT .)
    TIMES           reduce using rule 13 (int -> INT .)
    DIVIDE          reduce using rule 13 (int -> INT .)
    MOD             reduce using rule 13 (int -> INT .)


state 13

    (14) float -> FLOAT .

    FLOAT           reduce using rule 14 (float -> FLOAT .)
    INT             reduce using rule 14 (float -> FLOAT .)
    COMMENT         reduce using rule 14 (float -> FLOAT .)
    PONTO           reduce using rule 14 (float -> FLOAT .)
    COLON           reduce using rule 14 (float -> FLOAT .)
    $end            reduce using rule 14 (float -> FLOAT .)
    PLUS            reduce using rule 14 (float -> FLOAT .)
    MINUS           reduce using rule 14 (float -> FLOAT .)
    TIMES           reduce using rule 14 (float -> FLOAT .)
    DIVIDE          reduce using rule 14 (float -> FLOAT .)


state 14

    (9) expression -> int int . operationi
    (15) variable_list -> int . variable_list
    (17) variable_list -> int .
    (21) operationi -> . PLUS
    (22) operationi -> . MINUS
    (23) operationi -> . TIMES
    (24) operationi -> . DIVIDE
    (25) operationi -> . MOD
    (15) variable_list -> . int variable_list
    (16) variable_list -> . float variable_list
    (17) variable_list -> . int
    (18) variable_list -> . float
    (13) int -> . INT
    (14) float -> . FLOAT

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    COMMENT         reduce using rule 17 (variable_list -> int .)
    PONTO           reduce using rule 17 (variable_list -> int .)
    COLON           reduce using rule 17 (variable_list -> int .)
    $end            reduce using rule 17 (variable_list -> int .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    MOD             shift and go to state 27
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

  ! INT             [ reduce using rule 17 (variable_list -> int .) ]
  ! FLOAT           [ reduce using rule 17 (variable_list -> int .) ]

    int                            shift and go to state 21
    operationi                     shift and go to state 22
    variable_list                  shift and go to state 16
    float                          shift and go to state 28

state 15

    (12) expression -> int float . operationf
    (16) variable_list -> float . variable_list
    (18) variable_list -> float .
    (26) operationf -> . PLUS
    (27) operationf -> . MINUS
    (28) operationf -> . TIMES
    (29) operationf -> . DIVIDE
    (15) variable_list -> . int variable_list
    (16) variable_list -> . float variable_list
    (17) variable_list -> . int
    (18) variable_list -> . float
    (13) int -> . INT
    (14) float -> . FLOAT

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    COMMENT         reduce using rule 18 (variable_list -> float .)
    PONTO           reduce using rule 18 (variable_list -> float .)
    COLON           reduce using rule 18 (variable_list -> float .)
    $end            reduce using rule 18 (variable_list -> float .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

  ! INT             [ reduce using rule 18 (variable_list -> float .) ]
  ! FLOAT           [ reduce using rule 18 (variable_list -> float .) ]

    int                            shift and go to state 21
    float                          shift and go to state 28
    operationf                     shift and go to state 29
    variable_list                  shift and go to state 19

state 16

    (15) variable_list -> int variable_list .

    COMMENT         reduce using rule 15 (variable_list -> int variable_list .)
    PONTO           reduce using rule 15 (variable_list -> int variable_list .)
    COLON           reduce using rule 15 (variable_list -> int variable_list .)
    INT             reduce using rule 15 (variable_list -> int variable_list .)
    FLOAT           reduce using rule 15 (variable_list -> int variable_list .)
    $end            reduce using rule 15 (variable_list -> int variable_list .)


state 17

    (10) expression -> float float . operationf
    (16) variable_list -> float . variable_list
    (18) variable_list -> float .
    (26) operationf -> . PLUS
    (27) operationf -> . MINUS
    (28) operationf -> . TIMES
    (29) operationf -> . DIVIDE
    (15) variable_list -> . int variable_list
    (16) variable_list -> . float variable_list
    (17) variable_list -> . int
    (18) variable_list -> . float
    (13) int -> . INT
    (14) float -> . FLOAT

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    COMMENT         reduce using rule 18 (variable_list -> float .)
    PONTO           reduce using rule 18 (variable_list -> float .)
    COLON           reduce using rule 18 (variable_list -> float .)
    $end            reduce using rule 18 (variable_list -> float .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

  ! INT             [ reduce using rule 18 (variable_list -> float .) ]
  ! FLOAT           [ reduce using rule 18 (variable_list -> float .) ]

    float                          shift and go to state 28
    operationf                     shift and go to state 34
    variable_list                  shift and go to state 19
    int                            shift and go to state 21

state 18

    (11) expression -> float int . operationf
    (15) variable_list -> int . variable_list
    (17) variable_list -> int .
    (26) operationf -> . PLUS
    (27) operationf -> . MINUS
    (28) operationf -> . TIMES
    (29) operationf -> . DIVIDE
    (15) variable_list -> . int variable_list
    (16) variable_list -> . float variable_list
    (17) variable_list -> . int
    (18) variable_list -> . float
    (13) int -> . INT
    (14) float -> . FLOAT

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    COMMENT         reduce using rule 17 (variable_list -> int .)
    PONTO           reduce using rule 17 (variable_list -> int .)
    COLON           reduce using rule 17 (variable_list -> int .)
    $end            reduce using rule 17 (variable_list -> int .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

  ! INT             [ reduce using rule 17 (variable_list -> int .) ]
  ! FLOAT           [ reduce using rule 17 (variable_list -> int .) ]

    float                          shift and go to state 28
    int                            shift and go to state 21
    operationf                     shift and go to state 35
    variable_list                  shift and go to state 16

state 19

    (16) variable_list -> float variable_list .

    COMMENT         reduce using rule 16 (variable_list -> float variable_list .)
    PONTO           reduce using rule 16 (variable_list -> float variable_list .)
    COLON           reduce using rule 16 (variable_list -> float variable_list .)
    INT             reduce using rule 16 (variable_list -> float variable_list .)
    FLOAT           reduce using rule 16 (variable_list -> float variable_list .)
    $end            reduce using rule 16 (variable_list -> float variable_list .)


state 20

    (19) definition -> COLON WORD . COMMENT code SEMICOLON

    COMMENT         shift and go to state 36


state 21

    (15) variable_list -> int . variable_list
    (17) variable_list -> int .
    (15) variable_list -> . int variable_list
    (16) variable_list -> . float variable_list
    (17) variable_list -> . int
    (18) variable_list -> . float
    (13) int -> . INT
    (14) float -> . FLOAT

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    COMMENT         reduce using rule 17 (variable_list -> int .)
    PONTO           reduce using rule 17 (variable_list -> int .)
    COLON           reduce using rule 17 (variable_list -> int .)
    $end            reduce using rule 17 (variable_list -> int .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

  ! INT             [ reduce using rule 17 (variable_list -> int .) ]
  ! FLOAT           [ reduce using rule 17 (variable_list -> int .) ]

    int                            shift and go to state 21
    variable_list                  shift and go to state 16
    float                          shift and go to state 28

state 22

    (9) expression -> int int operationi .

    COMMENT         reduce using rule 9 (expression -> int int operationi .)
    PONTO           reduce using rule 9 (expression -> int int operationi .)
    COLON           reduce using rule 9 (expression -> int int operationi .)
    INT             reduce using rule 9 (expression -> int int operationi .)
    FLOAT           reduce using rule 9 (expression -> int int operationi .)
    $end            reduce using rule 9 (expression -> int int operationi .)
    SEMICOLON       reduce using rule 9 (expression -> int int operationi .)


state 23

    (21) operationi -> PLUS .

    COMMENT         reduce using rule 21 (operationi -> PLUS .)
    PONTO           reduce using rule 21 (operationi -> PLUS .)
    COLON           reduce using rule 21 (operationi -> PLUS .)
    INT             reduce using rule 21 (operationi -> PLUS .)
    FLOAT           reduce using rule 21 (operationi -> PLUS .)
    $end            reduce using rule 21 (operationi -> PLUS .)
    SEMICOLON       reduce using rule 21 (operationi -> PLUS .)


state 24

    (22) operationi -> MINUS .

    COMMENT         reduce using rule 22 (operationi -> MINUS .)
    PONTO           reduce using rule 22 (operationi -> MINUS .)
    COLON           reduce using rule 22 (operationi -> MINUS .)
    INT             reduce using rule 22 (operationi -> MINUS .)
    FLOAT           reduce using rule 22 (operationi -> MINUS .)
    $end            reduce using rule 22 (operationi -> MINUS .)
    SEMICOLON       reduce using rule 22 (operationi -> MINUS .)


state 25

    (23) operationi -> TIMES .

    COMMENT         reduce using rule 23 (operationi -> TIMES .)
    PONTO           reduce using rule 23 (operationi -> TIMES .)
    COLON           reduce using rule 23 (operationi -> TIMES .)
    INT             reduce using rule 23 (operationi -> TIMES .)
    FLOAT           reduce using rule 23 (operationi -> TIMES .)
    $end            reduce using rule 23 (operationi -> TIMES .)
    SEMICOLON       reduce using rule 23 (operationi -> TIMES .)


state 26

    (24) operationi -> DIVIDE .

    COMMENT         reduce using rule 24 (operationi -> DIVIDE .)
    PONTO           reduce using rule 24 (operationi -> DIVIDE .)
    COLON           reduce using rule 24 (operationi -> DIVIDE .)
    INT             reduce using rule 24 (operationi -> DIVIDE .)
    FLOAT           reduce using rule 24 (operationi -> DIVIDE .)
    $end            reduce using rule 24 (operationi -> DIVIDE .)
    SEMICOLON       reduce using rule 24 (operationi -> DIVIDE .)


state 27

    (25) operationi -> MOD .

    COMMENT         reduce using rule 25 (operationi -> MOD .)
    PONTO           reduce using rule 25 (operationi -> MOD .)
    COLON           reduce using rule 25 (operationi -> MOD .)
    INT             reduce using rule 25 (operationi -> MOD .)
    FLOAT           reduce using rule 25 (operationi -> MOD .)
    $end            reduce using rule 25 (operationi -> MOD .)
    SEMICOLON       reduce using rule 25 (operationi -> MOD .)


state 28

    (16) variable_list -> float . variable_list
    (18) variable_list -> float .
    (15) variable_list -> . int variable_list
    (16) variable_list -> . float variable_list
    (17) variable_list -> . int
    (18) variable_list -> . float
    (13) int -> . INT
    (14) float -> . FLOAT

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    COMMENT         reduce using rule 18 (variable_list -> float .)
    PONTO           reduce using rule 18 (variable_list -> float .)
    COLON           reduce using rule 18 (variable_list -> float .)
    $end            reduce using rule 18 (variable_list -> float .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

  ! INT             [ reduce using rule 18 (variable_list -> float .) ]
  ! FLOAT           [ reduce using rule 18 (variable_list -> float .) ]

    float                          shift and go to state 28
    variable_list                  shift and go to state 19
    int                            shift and go to state 21

state 29

    (12) expression -> int float operationf .

    COMMENT         reduce using rule 12 (expression -> int float operationf .)
    PONTO           reduce using rule 12 (expression -> int float operationf .)
    COLON           reduce using rule 12 (expression -> int float operationf .)
    INT             reduce using rule 12 (expression -> int float operationf .)
    FLOAT           reduce using rule 12 (expression -> int float operationf .)
    $end            reduce using rule 12 (expression -> int float operationf .)
    SEMICOLON       reduce using rule 12 (expression -> int float operationf .)


state 30

    (26) operationf -> PLUS .

    COMMENT         reduce using rule 26 (operationf -> PLUS .)
    PONTO           reduce using rule 26 (operationf -> PLUS .)
    COLON           reduce using rule 26 (operationf -> PLUS .)
    INT             reduce using rule 26 (operationf -> PLUS .)
    FLOAT           reduce using rule 26 (operationf -> PLUS .)
    $end            reduce using rule 26 (operationf -> PLUS .)
    SEMICOLON       reduce using rule 26 (operationf -> PLUS .)


state 31

    (27) operationf -> MINUS .

    COMMENT         reduce using rule 27 (operationf -> MINUS .)
    PONTO           reduce using rule 27 (operationf -> MINUS .)
    COLON           reduce using rule 27 (operationf -> MINUS .)
    INT             reduce using rule 27 (operationf -> MINUS .)
    FLOAT           reduce using rule 27 (operationf -> MINUS .)
    $end            reduce using rule 27 (operationf -> MINUS .)
    SEMICOLON       reduce using rule 27 (operationf -> MINUS .)


state 32

    (28) operationf -> TIMES .

    COMMENT         reduce using rule 28 (operationf -> TIMES .)
    PONTO           reduce using rule 28 (operationf -> TIMES .)
    COLON           reduce using rule 28 (operationf -> TIMES .)
    INT             reduce using rule 28 (operationf -> TIMES .)
    FLOAT           reduce using rule 28 (operationf -> TIMES .)
    $end            reduce using rule 28 (operationf -> TIMES .)
    SEMICOLON       reduce using rule 28 (operationf -> TIMES .)


state 33

    (29) operationf -> DIVIDE .

    COMMENT         reduce using rule 29 (operationf -> DIVIDE .)
    PONTO           reduce using rule 29 (operationf -> DIVIDE .)
    COLON           reduce using rule 29 (operationf -> DIVIDE .)
    INT             reduce using rule 29 (operationf -> DIVIDE .)
    FLOAT           reduce using rule 29 (operationf -> DIVIDE .)
    $end            reduce using rule 29 (operationf -> DIVIDE .)
    SEMICOLON       reduce using rule 29 (operationf -> DIVIDE .)


state 34

    (10) expression -> float float operationf .

    COMMENT         reduce using rule 10 (expression -> float float operationf .)
    PONTO           reduce using rule 10 (expression -> float float operationf .)
    COLON           reduce using rule 10 (expression -> float float operationf .)
    INT             reduce using rule 10 (expression -> float float operationf .)
    FLOAT           reduce using rule 10 (expression -> float float operationf .)
    $end            reduce using rule 10 (expression -> float float operationf .)
    SEMICOLON       reduce using rule 10 (expression -> float float operationf .)


state 35

    (11) expression -> float int operationf .

    COMMENT         reduce using rule 11 (expression -> float int operationf .)
    PONTO           reduce using rule 11 (expression -> float int operationf .)
    COLON           reduce using rule 11 (expression -> float int operationf .)
    INT             reduce using rule 11 (expression -> float int operationf .)
    FLOAT           reduce using rule 11 (expression -> float int operationf .)
    $end            reduce using rule 11 (expression -> float int operationf .)
    SEMICOLON       reduce using rule 11 (expression -> float int operationf .)


state 36

    (19) definition -> COLON WORD COMMENT . code SEMICOLON
    (20) code -> . expression
    (9) expression -> . int int operationi
    (10) expression -> . float float operationf
    (11) expression -> . float int operationf
    (12) expression -> . int float operationf
    (13) int -> . INT
    (14) float -> . FLOAT

    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    code                           shift and go to state 37
    expression                     shift and go to state 38
    int                            shift and go to state 39
    float                          shift and go to state 40

state 37

    (19) definition -> COLON WORD COMMENT code . SEMICOLON

    SEMICOLON       shift and go to state 41


state 38

    (20) code -> expression .

    SEMICOLON       reduce using rule 20 (code -> expression .)


state 39

    (9) expression -> int . int operationi
    (12) expression -> int . float operationf
    (13) int -> . INT
    (14) float -> . FLOAT

    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    int                            shift and go to state 42
    float                          shift and go to state 43

state 40

    (10) expression -> float . float operationf
    (11) expression -> float . int operationf
    (14) float -> . FLOAT
    (13) int -> . INT

    FLOAT           shift and go to state 13
    INT             shift and go to state 12

    float                          shift and go to state 44
    int                            shift and go to state 45

state 41

    (19) definition -> COLON WORD COMMENT code SEMICOLON .

    COMMENT         reduce using rule 19 (definition -> COLON WORD COMMENT code SEMICOLON .)
    PONTO           reduce using rule 19 (definition -> COLON WORD COMMENT code SEMICOLON .)
    COLON           reduce using rule 19 (definition -> COLON WORD COMMENT code SEMICOLON .)
    INT             reduce using rule 19 (definition -> COLON WORD COMMENT code SEMICOLON .)
    FLOAT           reduce using rule 19 (definition -> COLON WORD COMMENT code SEMICOLON .)
    $end            reduce using rule 19 (definition -> COLON WORD COMMENT code SEMICOLON .)


state 42

    (9) expression -> int int . operationi
    (21) operationi -> . PLUS
    (22) operationi -> . MINUS
    (23) operationi -> . TIMES
    (24) operationi -> . DIVIDE
    (25) operationi -> . MOD

    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    MOD             shift and go to state 27

    operationi                     shift and go to state 22

state 43

    (12) expression -> int float . operationf
    (26) operationf -> . PLUS
    (27) operationf -> . MINUS
    (28) operationf -> . TIMES
    (29) operationf -> . DIVIDE

    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33

    operationf                     shift and go to state 29

state 44

    (10) expression -> float float . operationf
    (26) operationf -> . PLUS
    (27) operationf -> . MINUS
    (28) operationf -> . TIMES
    (29) operationf -> . DIVIDE

    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33

    operationf                     shift and go to state 34

state 45

    (11) expression -> float int . operationf
    (26) operationf -> . PLUS
    (27) operationf -> . MINUS
    (28) operationf -> . TIMES
    (29) operationf -> . DIVIDE

    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33

    operationf                     shift and go to state 35
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 9 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 9 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 10 resolved as shift
WARNING: shift/reduce conflict for INT in state 10 resolved as shift
WARNING: shift/reduce conflict for INT in state 14 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 14 resolved as shift
WARNING: shift/reduce conflict for INT in state 15 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 15 resolved as shift
WARNING: shift/reduce conflict for INT in state 17 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 17 resolved as shift
WARNING: shift/reduce conflict for INT in state 18 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 18 resolved as shift
WARNING: shift/reduce conflict for INT in state 21 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 21 resolved as shift
WARNING: shift/reduce conflict for INT in state 28 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 28 resolved as shift
