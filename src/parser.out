Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DROP
    DUP
    OVER
    SWAP

Grammar

Rule 0     S' -> axioma
Rule 1     axioma -> axioma line
Rule 2     axioma -> empty
Rule 3     line -> COMMENT
Rule 4     line -> PONTO
Rule 5     line -> line operation
Rule 6     line -> int line
Rule 7     line -> float line
Rule 8     line -> int
Rule 9     line -> float
Rule 10    int -> INT
Rule 11    float -> FLOAT
Rule 12    line -> COLON WORD COMMENT code SEMICOLON
Rule 13    code -> axioma
Rule 14    line -> WORD
Rule 15    operation -> PLUS
Rule 16    operation -> MINUS
Rule 17    operation -> TIMES
Rule 18    operation -> DIVIDE
Rule 19    operation -> MOD
Rule 20    empty -> <empty>

Terminals, with rules where they appear

COLON                : 12
COMMENT              : 3 12
DIVIDE               : 18
DROP                 : 
DUP                  : 
FLOAT                : 11
INT                  : 10
MINUS                : 16
MOD                  : 19
OVER                 : 
PLUS                 : 15
PONTO                : 4
SEMICOLON            : 12
SWAP                 : 
TIMES                : 17
WORD                 : 12 14
error                : 

Nonterminals, with rules where they appear

axioma               : 1 13 0
code                 : 12
empty                : 2
float                : 7 9
int                  : 6 8
line                 : 1 5 6 7
operation            : 5

Parsing method: LALR

state 0

    (0) S' -> . axioma
    (1) axioma -> . axioma line
    (2) axioma -> . empty
    (20) empty -> .

    COMMENT         reduce using rule 20 (empty -> .)
    PONTO           reduce using rule 20 (empty -> .)
    COLON           reduce using rule 20 (empty -> .)
    WORD            reduce using rule 20 (empty -> .)
    INT             reduce using rule 20 (empty -> .)
    FLOAT           reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)

    axioma                         shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> axioma .
    (1) axioma -> axioma . line
    (3) line -> . COMMENT
    (4) line -> . PONTO
    (5) line -> . line operation
    (6) line -> . int line
    (7) line -> . float line
    (8) line -> . int
    (9) line -> . float
    (12) line -> . COLON WORD COMMENT code SEMICOLON
    (14) line -> . WORD
    (10) int -> . INT
    (11) float -> . FLOAT

    COMMENT         shift and go to state 4
    PONTO           shift and go to state 5
    COLON           shift and go to state 8
    WORD            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    line                           shift and go to state 3
    int                            shift and go to state 6
    float                          shift and go to state 7

state 2

    (2) axioma -> empty .

    COMMENT         reduce using rule 2 (axioma -> empty .)
    PONTO           reduce using rule 2 (axioma -> empty .)
    COLON           reduce using rule 2 (axioma -> empty .)
    WORD            reduce using rule 2 (axioma -> empty .)
    INT             reduce using rule 2 (axioma -> empty .)
    FLOAT           reduce using rule 2 (axioma -> empty .)
    $end            reduce using rule 2 (axioma -> empty .)
    SEMICOLON       reduce using rule 2 (axioma -> empty .)


state 3

    (1) axioma -> axioma line .
    (5) line -> line . operation
    (15) operation -> . PLUS
    (16) operation -> . MINUS
    (17) operation -> . TIMES
    (18) operation -> . DIVIDE
    (19) operation -> . MOD

    COMMENT         reduce using rule 1 (axioma -> axioma line .)
    PONTO           reduce using rule 1 (axioma -> axioma line .)
    COLON           reduce using rule 1 (axioma -> axioma line .)
    WORD            reduce using rule 1 (axioma -> axioma line .)
    INT             reduce using rule 1 (axioma -> axioma line .)
    FLOAT           reduce using rule 1 (axioma -> axioma line .)
    $end            reduce using rule 1 (axioma -> axioma line .)
    SEMICOLON       reduce using rule 1 (axioma -> axioma line .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    MOD             shift and go to state 17

    operation                      shift and go to state 12

state 4

    (3) line -> COMMENT .

    PLUS            reduce using rule 3 (line -> COMMENT .)
    MINUS           reduce using rule 3 (line -> COMMENT .)
    TIMES           reduce using rule 3 (line -> COMMENT .)
    DIVIDE          reduce using rule 3 (line -> COMMENT .)
    MOD             reduce using rule 3 (line -> COMMENT .)
    COMMENT         reduce using rule 3 (line -> COMMENT .)
    PONTO           reduce using rule 3 (line -> COMMENT .)
    COLON           reduce using rule 3 (line -> COMMENT .)
    WORD            reduce using rule 3 (line -> COMMENT .)
    INT             reduce using rule 3 (line -> COMMENT .)
    FLOAT           reduce using rule 3 (line -> COMMENT .)
    $end            reduce using rule 3 (line -> COMMENT .)
    SEMICOLON       reduce using rule 3 (line -> COMMENT .)


state 5

    (4) line -> PONTO .

    PLUS            reduce using rule 4 (line -> PONTO .)
    MINUS           reduce using rule 4 (line -> PONTO .)
    TIMES           reduce using rule 4 (line -> PONTO .)
    DIVIDE          reduce using rule 4 (line -> PONTO .)
    MOD             reduce using rule 4 (line -> PONTO .)
    COMMENT         reduce using rule 4 (line -> PONTO .)
    PONTO           reduce using rule 4 (line -> PONTO .)
    COLON           reduce using rule 4 (line -> PONTO .)
    WORD            reduce using rule 4 (line -> PONTO .)
    INT             reduce using rule 4 (line -> PONTO .)
    FLOAT           reduce using rule 4 (line -> PONTO .)
    $end            reduce using rule 4 (line -> PONTO .)
    SEMICOLON       reduce using rule 4 (line -> PONTO .)


state 6

    (6) line -> int . line
    (8) line -> int .
    (3) line -> . COMMENT
    (4) line -> . PONTO
    (5) line -> . line operation
    (6) line -> . int line
    (7) line -> . float line
    (8) line -> . int
    (9) line -> . float
    (12) line -> . COLON WORD COMMENT code SEMICOLON
    (14) line -> . WORD
    (10) int -> . INT
    (11) float -> . FLOAT

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for WORD resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    PLUS            reduce using rule 8 (line -> int .)
    MINUS           reduce using rule 8 (line -> int .)
    TIMES           reduce using rule 8 (line -> int .)
    DIVIDE          reduce using rule 8 (line -> int .)
    MOD             reduce using rule 8 (line -> int .)
    $end            reduce using rule 8 (line -> int .)
    SEMICOLON       reduce using rule 8 (line -> int .)
    COMMENT         shift and go to state 4
    PONTO           shift and go to state 5
    COLON           shift and go to state 8
    WORD            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

  ! COMMENT         [ reduce using rule 8 (line -> int .) ]
  ! PONTO           [ reduce using rule 8 (line -> int .) ]
  ! COLON           [ reduce using rule 8 (line -> int .) ]
  ! WORD            [ reduce using rule 8 (line -> int .) ]
  ! INT             [ reduce using rule 8 (line -> int .) ]
  ! FLOAT           [ reduce using rule 8 (line -> int .) ]

    int                            shift and go to state 6
    line                           shift and go to state 18
    float                          shift and go to state 7

state 7

    (7) line -> float . line
    (9) line -> float .
    (3) line -> . COMMENT
    (4) line -> . PONTO
    (5) line -> . line operation
    (6) line -> . int line
    (7) line -> . float line
    (8) line -> . int
    (9) line -> . float
    (12) line -> . COLON WORD COMMENT code SEMICOLON
    (14) line -> . WORD
    (10) int -> . INT
    (11) float -> . FLOAT

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for WORD resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    PLUS            reduce using rule 9 (line -> float .)
    MINUS           reduce using rule 9 (line -> float .)
    TIMES           reduce using rule 9 (line -> float .)
    DIVIDE          reduce using rule 9 (line -> float .)
    MOD             reduce using rule 9 (line -> float .)
    $end            reduce using rule 9 (line -> float .)
    SEMICOLON       reduce using rule 9 (line -> float .)
    COMMENT         shift and go to state 4
    PONTO           shift and go to state 5
    COLON           shift and go to state 8
    WORD            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

  ! COMMENT         [ reduce using rule 9 (line -> float .) ]
  ! PONTO           [ reduce using rule 9 (line -> float .) ]
  ! COLON           [ reduce using rule 9 (line -> float .) ]
  ! WORD            [ reduce using rule 9 (line -> float .) ]
  ! INT             [ reduce using rule 9 (line -> float .) ]
  ! FLOAT           [ reduce using rule 9 (line -> float .) ]

    float                          shift and go to state 7
    line                           shift and go to state 19
    int                            shift and go to state 6

state 8

    (12) line -> COLON . WORD COMMENT code SEMICOLON

    WORD            shift and go to state 20


state 9

    (14) line -> WORD .

    PLUS            reduce using rule 14 (line -> WORD .)
    MINUS           reduce using rule 14 (line -> WORD .)
    TIMES           reduce using rule 14 (line -> WORD .)
    DIVIDE          reduce using rule 14 (line -> WORD .)
    MOD             reduce using rule 14 (line -> WORD .)
    COMMENT         reduce using rule 14 (line -> WORD .)
    PONTO           reduce using rule 14 (line -> WORD .)
    COLON           reduce using rule 14 (line -> WORD .)
    WORD            reduce using rule 14 (line -> WORD .)
    INT             reduce using rule 14 (line -> WORD .)
    FLOAT           reduce using rule 14 (line -> WORD .)
    $end            reduce using rule 14 (line -> WORD .)
    SEMICOLON       reduce using rule 14 (line -> WORD .)


state 10

    (10) int -> INT .

    COMMENT         reduce using rule 10 (int -> INT .)
    PONTO           reduce using rule 10 (int -> INT .)
    COLON           reduce using rule 10 (int -> INT .)
    WORD            reduce using rule 10 (int -> INT .)
    INT             reduce using rule 10 (int -> INT .)
    FLOAT           reduce using rule 10 (int -> INT .)
    PLUS            reduce using rule 10 (int -> INT .)
    MINUS           reduce using rule 10 (int -> INT .)
    TIMES           reduce using rule 10 (int -> INT .)
    DIVIDE          reduce using rule 10 (int -> INT .)
    MOD             reduce using rule 10 (int -> INT .)
    $end            reduce using rule 10 (int -> INT .)
    SEMICOLON       reduce using rule 10 (int -> INT .)


state 11

    (11) float -> FLOAT .

    COMMENT         reduce using rule 11 (float -> FLOAT .)
    PONTO           reduce using rule 11 (float -> FLOAT .)
    COLON           reduce using rule 11 (float -> FLOAT .)
    WORD            reduce using rule 11 (float -> FLOAT .)
    INT             reduce using rule 11 (float -> FLOAT .)
    FLOAT           reduce using rule 11 (float -> FLOAT .)
    PLUS            reduce using rule 11 (float -> FLOAT .)
    MINUS           reduce using rule 11 (float -> FLOAT .)
    TIMES           reduce using rule 11 (float -> FLOAT .)
    DIVIDE          reduce using rule 11 (float -> FLOAT .)
    MOD             reduce using rule 11 (float -> FLOAT .)
    $end            reduce using rule 11 (float -> FLOAT .)
    SEMICOLON       reduce using rule 11 (float -> FLOAT .)


state 12

    (5) line -> line operation .

    PLUS            reduce using rule 5 (line -> line operation .)
    MINUS           reduce using rule 5 (line -> line operation .)
    TIMES           reduce using rule 5 (line -> line operation .)
    DIVIDE          reduce using rule 5 (line -> line operation .)
    MOD             reduce using rule 5 (line -> line operation .)
    COMMENT         reduce using rule 5 (line -> line operation .)
    PONTO           reduce using rule 5 (line -> line operation .)
    COLON           reduce using rule 5 (line -> line operation .)
    WORD            reduce using rule 5 (line -> line operation .)
    INT             reduce using rule 5 (line -> line operation .)
    FLOAT           reduce using rule 5 (line -> line operation .)
    $end            reduce using rule 5 (line -> line operation .)
    SEMICOLON       reduce using rule 5 (line -> line operation .)


state 13

    (15) operation -> PLUS .

    PLUS            reduce using rule 15 (operation -> PLUS .)
    MINUS           reduce using rule 15 (operation -> PLUS .)
    TIMES           reduce using rule 15 (operation -> PLUS .)
    DIVIDE          reduce using rule 15 (operation -> PLUS .)
    MOD             reduce using rule 15 (operation -> PLUS .)
    COMMENT         reduce using rule 15 (operation -> PLUS .)
    PONTO           reduce using rule 15 (operation -> PLUS .)
    COLON           reduce using rule 15 (operation -> PLUS .)
    WORD            reduce using rule 15 (operation -> PLUS .)
    INT             reduce using rule 15 (operation -> PLUS .)
    FLOAT           reduce using rule 15 (operation -> PLUS .)
    $end            reduce using rule 15 (operation -> PLUS .)
    SEMICOLON       reduce using rule 15 (operation -> PLUS .)


state 14

    (16) operation -> MINUS .

    PLUS            reduce using rule 16 (operation -> MINUS .)
    MINUS           reduce using rule 16 (operation -> MINUS .)
    TIMES           reduce using rule 16 (operation -> MINUS .)
    DIVIDE          reduce using rule 16 (operation -> MINUS .)
    MOD             reduce using rule 16 (operation -> MINUS .)
    COMMENT         reduce using rule 16 (operation -> MINUS .)
    PONTO           reduce using rule 16 (operation -> MINUS .)
    COLON           reduce using rule 16 (operation -> MINUS .)
    WORD            reduce using rule 16 (operation -> MINUS .)
    INT             reduce using rule 16 (operation -> MINUS .)
    FLOAT           reduce using rule 16 (operation -> MINUS .)
    $end            reduce using rule 16 (operation -> MINUS .)
    SEMICOLON       reduce using rule 16 (operation -> MINUS .)


state 15

    (17) operation -> TIMES .

    PLUS            reduce using rule 17 (operation -> TIMES .)
    MINUS           reduce using rule 17 (operation -> TIMES .)
    TIMES           reduce using rule 17 (operation -> TIMES .)
    DIVIDE          reduce using rule 17 (operation -> TIMES .)
    MOD             reduce using rule 17 (operation -> TIMES .)
    COMMENT         reduce using rule 17 (operation -> TIMES .)
    PONTO           reduce using rule 17 (operation -> TIMES .)
    COLON           reduce using rule 17 (operation -> TIMES .)
    WORD            reduce using rule 17 (operation -> TIMES .)
    INT             reduce using rule 17 (operation -> TIMES .)
    FLOAT           reduce using rule 17 (operation -> TIMES .)
    $end            reduce using rule 17 (operation -> TIMES .)
    SEMICOLON       reduce using rule 17 (operation -> TIMES .)


state 16

    (18) operation -> DIVIDE .

    PLUS            reduce using rule 18 (operation -> DIVIDE .)
    MINUS           reduce using rule 18 (operation -> DIVIDE .)
    TIMES           reduce using rule 18 (operation -> DIVIDE .)
    DIVIDE          reduce using rule 18 (operation -> DIVIDE .)
    MOD             reduce using rule 18 (operation -> DIVIDE .)
    COMMENT         reduce using rule 18 (operation -> DIVIDE .)
    PONTO           reduce using rule 18 (operation -> DIVIDE .)
    COLON           reduce using rule 18 (operation -> DIVIDE .)
    WORD            reduce using rule 18 (operation -> DIVIDE .)
    INT             reduce using rule 18 (operation -> DIVIDE .)
    FLOAT           reduce using rule 18 (operation -> DIVIDE .)
    $end            reduce using rule 18 (operation -> DIVIDE .)
    SEMICOLON       reduce using rule 18 (operation -> DIVIDE .)


state 17

    (19) operation -> MOD .

    PLUS            reduce using rule 19 (operation -> MOD .)
    MINUS           reduce using rule 19 (operation -> MOD .)
    TIMES           reduce using rule 19 (operation -> MOD .)
    DIVIDE          reduce using rule 19 (operation -> MOD .)
    MOD             reduce using rule 19 (operation -> MOD .)
    COMMENT         reduce using rule 19 (operation -> MOD .)
    PONTO           reduce using rule 19 (operation -> MOD .)
    COLON           reduce using rule 19 (operation -> MOD .)
    WORD            reduce using rule 19 (operation -> MOD .)
    INT             reduce using rule 19 (operation -> MOD .)
    FLOAT           reduce using rule 19 (operation -> MOD .)
    $end            reduce using rule 19 (operation -> MOD .)
    SEMICOLON       reduce using rule 19 (operation -> MOD .)


state 18

    (6) line -> int line .
    (5) line -> line . operation
    (15) operation -> . PLUS
    (16) operation -> . MINUS
    (17) operation -> . TIMES
    (18) operation -> . DIVIDE
    (19) operation -> . MOD

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    COMMENT         reduce using rule 6 (line -> int line .)
    PONTO           reduce using rule 6 (line -> int line .)
    COLON           reduce using rule 6 (line -> int line .)
    WORD            reduce using rule 6 (line -> int line .)
    INT             reduce using rule 6 (line -> int line .)
    FLOAT           reduce using rule 6 (line -> int line .)
    $end            reduce using rule 6 (line -> int line .)
    SEMICOLON       reduce using rule 6 (line -> int line .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    MOD             shift and go to state 17

  ! PLUS            [ reduce using rule 6 (line -> int line .) ]
  ! MINUS           [ reduce using rule 6 (line -> int line .) ]
  ! TIMES           [ reduce using rule 6 (line -> int line .) ]
  ! DIVIDE          [ reduce using rule 6 (line -> int line .) ]
  ! MOD             [ reduce using rule 6 (line -> int line .) ]

    operation                      shift and go to state 12

state 19

    (7) line -> float line .
    (5) line -> line . operation
    (15) operation -> . PLUS
    (16) operation -> . MINUS
    (17) operation -> . TIMES
    (18) operation -> . DIVIDE
    (19) operation -> . MOD

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    COMMENT         reduce using rule 7 (line -> float line .)
    PONTO           reduce using rule 7 (line -> float line .)
    COLON           reduce using rule 7 (line -> float line .)
    WORD            reduce using rule 7 (line -> float line .)
    INT             reduce using rule 7 (line -> float line .)
    FLOAT           reduce using rule 7 (line -> float line .)
    $end            reduce using rule 7 (line -> float line .)
    SEMICOLON       reduce using rule 7 (line -> float line .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    MOD             shift and go to state 17

  ! PLUS            [ reduce using rule 7 (line -> float line .) ]
  ! MINUS           [ reduce using rule 7 (line -> float line .) ]
  ! TIMES           [ reduce using rule 7 (line -> float line .) ]
  ! DIVIDE          [ reduce using rule 7 (line -> float line .) ]
  ! MOD             [ reduce using rule 7 (line -> float line .) ]

    operation                      shift and go to state 12

state 20

    (12) line -> COLON WORD . COMMENT code SEMICOLON

    COMMENT         shift and go to state 21


state 21

    (12) line -> COLON WORD COMMENT . code SEMICOLON
    (13) code -> . axioma
    (1) axioma -> . axioma line
    (2) axioma -> . empty
    (20) empty -> .

    COMMENT         reduce using rule 20 (empty -> .)
    PONTO           reduce using rule 20 (empty -> .)
    COLON           reduce using rule 20 (empty -> .)
    WORD            reduce using rule 20 (empty -> .)
    INT             reduce using rule 20 (empty -> .)
    FLOAT           reduce using rule 20 (empty -> .)
    SEMICOLON       reduce using rule 20 (empty -> .)

    code                           shift and go to state 22
    axioma                         shift and go to state 23
    empty                          shift and go to state 2

state 22

    (12) line -> COLON WORD COMMENT code . SEMICOLON

    SEMICOLON       shift and go to state 24


state 23

    (13) code -> axioma .
    (1) axioma -> axioma . line
    (3) line -> . COMMENT
    (4) line -> . PONTO
    (5) line -> . line operation
    (6) line -> . int line
    (7) line -> . float line
    (8) line -> . int
    (9) line -> . float
    (12) line -> . COLON WORD COMMENT code SEMICOLON
    (14) line -> . WORD
    (10) int -> . INT
    (11) float -> . FLOAT

    SEMICOLON       reduce using rule 13 (code -> axioma .)
    COMMENT         shift and go to state 4
    PONTO           shift and go to state 5
    COLON           shift and go to state 8
    WORD            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    line                           shift and go to state 3
    int                            shift and go to state 6
    float                          shift and go to state 7

state 24

    (12) line -> COLON WORD COMMENT code SEMICOLON .

    PLUS            reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    MINUS           reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    TIMES           reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    DIVIDE          reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    MOD             reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    COMMENT         reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    PONTO           reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    COLON           reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    WORD            reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    INT             reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    FLOAT           reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    $end            reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)
    SEMICOLON       reduce using rule 12 (line -> COLON WORD COMMENT code SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMENT in state 6 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 6 resolved as shift
WARNING: shift/reduce conflict for COLON in state 6 resolved as shift
WARNING: shift/reduce conflict for WORD in state 6 resolved as shift
WARNING: shift/reduce conflict for INT in state 6 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 6 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 7 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 7 resolved as shift
WARNING: shift/reduce conflict for COLON in state 7 resolved as shift
WARNING: shift/reduce conflict for WORD in state 7 resolved as shift
WARNING: shift/reduce conflict for INT in state 7 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 7 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 18 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 18 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 18 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 18 resolved as shift
WARNING: shift/reduce conflict for MOD in state 18 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 19 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 19 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 19 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 19 resolved as shift
WARNING: shift/reduce conflict for MOD in state 19 resolved as shift
